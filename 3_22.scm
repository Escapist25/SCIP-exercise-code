(define (make-queue)
  (let ((front-ptr `())
        (rear-ptr `()))
    (define queue (cons front-ptr rear-ptr))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?) 
        (error "Front Called with empty queue")
        ((car front-ptr))))
    (define (insert-queue! item)
      (let ((new-pair (cons item `())))
       (cond ((empty-queue?) 
              (set! front-ptr new-pair)
              (set! rear-ptr new-pair)
              (cons front-ptr rear-ptr))
             (else 
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr (cdr rear-ptr))
               (cons front-ptr rear-ptr)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "Delete CALLED with empty queue"))
            (else 
              (set! front-ptr (cdr front-ptr))))
      (cons front-ptr rear-ptr))
    (define (print-queue)
      (display front-ptr)
      (newline))
    (define (dispatch opt)
      (cond ((eq? opt `empty-queue?) empty-queue?)
            ((eq? opt `front-ptr)front-ptr )
            ((eq? opt `insert-queue!) insert-queue!)
            ((eq? opt `delete-queue!) delete-que!)
            ((eq? opt `print-queue) print-queue)
            (else (error "opt Error"))))
    dispatch))
(define q (make-queue))
((q `insert-queue!) `a)
((q `insert-queue!) `b)
((q `delete-queue!))
((q `delete-queue!))
((q `print-queue))
