(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f times)
  (if (= times 1) 
    f
    (compose f (repeated f (- times 1)))))
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 0.0001))
  (define (try guess)
    (let ((next (f guess)))
     (display guess)
     (newline)
     (if (close-enough? guess next)
       next
       (try next))))
  (try first-guess)) 
(define (average-dump f)
  (define average (lambda (x y) (/ (+ x y) 2)))
  (lambda (x) (average x (f x))))
(define (square x) (* x x))
(define (solve-sqrt n x)
  (define (f y)
    (/ x (expt y (- n 1))))
  (define (cal-dtime n)
    (if (= n 1) 
      0 
      (+ 1 (cal-dtime (quotient n 2)))))
  (fixed-point ((repeated average-dump (cal-dtime n)) f) 1.0))
(display (solve-sqrt 16 65535.0))
