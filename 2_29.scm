(define (make-mobile left right)
  (list left right))
(define (make-branch leng struct)
  (list leng struct))
(define (left-branch a)
  (car (cadr a)))
(define (right-branch a)
  (cdr (cadr a)))
(define (branch-length a)
  (car a))
(define (branch-struct a)
  (cadr a))
(define (total-weight x)
  (if (not (pair? (branch-struct x)))
    (cdr x)
    (+ (total-weight (left-branch x))
       (total-weight (right-branch x)))))
(define (check a)
  (if (not (pair? (branch-struct a)))
    (branch-struct a)
    (let ((left (check (left-branch a)))
          (right (check (right-branch a))))
      (if (and left right)
        (if (= (* (branch-length (left-branch a)) left)
               (* (branch-length (right-branch a)) right))
          (+ left right)
          #f)
        #f))))

