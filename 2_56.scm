(define (deriv expr var) 
  ;(display expr)
  ;(newline)
  (cond ((number? expr) 0) 
        ((null? expr) 0)
        ((variable? expr) 
         (if (same-variable? expr var) 
           1
           0))
        ((sum? expr)
         (make-sum (deriv (addend expr) var) 
                   (deriv (augend expr) var)))
        ((product? expr)
         (make-sum (make-product (deriv (multiplier expr) var) (multiplicand expr) )
                   (make-product (deriv (multiplicand expr) var) (multiplier expr) )))
        ((exponentiation? expr)
         (make-product (exponent expr) (make-exponentiation (base expr) (- (exponent expr) 1))))
        (else (error "unknown expression type"))))
(define (variable? x) (symbol? x))
(define (same-variable? x y) 
  (and (variable? x) (variable? y) (eq? x y)))
(define (sum? x) 
  (and (pair? x) (eq? (car x) `+)))
(define (product? x) 
  (and (pair? x) (eq? (car x) `*)))
(define (addend x) (cadr x))
(define (multiplicand x) 
  (if (pair? (cddr x))
    (if (pair? (caddr x))
     (cons `+ (cddr x)) 
     (caddr x)) 
    0))
(define (multiplier x) (cadr x))
(define (multiplicand x) 
  (if (pair? (cddr x))
    (if (pair? (caddr x))
     (cons `* (cddr x)) 
     (caddr x)) 
    1))
(deriv `(* (* x y) (+ x 3)) `x)
(define (make-sum1 a1 a2)
  (list `+ a1 a2))
(define (=number? x num)
  (and (number? x) (= x num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (make-sum1 a1 a2))))
(define (make-product1 a1 a2)
  (list `* a1 a2))
(define (make-product a1 a2)
  (cond ((=number? a1 0) 0)
        ((=number? a2 0) 0)
        ((=number? a1 1) a2)
        ((=number? a2 1) a1)
        ((and (number? a1) (number? a2)) (* a1 a2))
        (else (make-product1 a1 a2))))
(define (exponentiation? x) 
  (and (pair? x) (eq? (car x) `expt)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))
(define (make-exponentiation base exponent) (list `expt base exponent))
(deriv `(+ x x 5 (* x 3)) `x)

