(define a (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
(define b (list 1 2 3))
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
(define (matrix-*-vector m v)
  (map (lambda (line) (dot-product line v)) m))
(define (transpos mat)
  (accumulate-n cons nil mat))
(transpos a)
(define (matrix-*-matrix m n)
  (let ((cols (transpos n)))
   (map (lambda (x) (matrix-*-vector cols x)) m)))
