(define nil `())
(define (make-node v l r)
  (list v l r))
(define (empty-node)
  (make-node nil nil nil))
(define (empty-node? node) (null? (car node)))
(define (left-node p) (cadr p))
(define (right-node p) (caddr p))
(define (value p) (car p))
(define (set-left-node! p p1) (set-car! (cdr p) p1))
(define (set-right-node! p p1) (set-car! (cddr p) p1))
(define (set-value! p v1) (set-car! p v1))

(define (make-deque) (cons nil nil))
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr deque p1) (set-car! deque p1))
(define (set-rear-ptr deque p1) (set-cdr! deque p2))
(define (empty-deque? deque) (or (null? (car deque)) (null? (cdr deque))) )
(define (front-deque deque)
  (if (empty-deque? deque)
    (error "Error in front-deque --empty deque")
    (car (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
    (error "Error in front-deque --empty deque")
    (car (rear-ptr  deque))))
(define (front-insert-deque! deque node)
  (let ((new-node (make-node node nil nil)))
   (cond ((empty-deque? deque) 
          (set-car! deque new-node) 
          (set-cdr! deque new-node))
         (else 
           (set-right-node! new-node (car deque))
           (set-left-node!  (car deque) new-node)
           (set-car! deque new-node)))) 
  deque)
  
(define (rear-insert-deque! deque node)
  (let ((new-node (make-node node nil nil)))
   (cond ((empty-deque? deque) 
          (set-car! deque new-node) 
          (set-cdr! deque new-node))
         (else 
           (set-left-node! new-node (cdr deque))
           (set-right-node!  (cdr deque) new-node)
           (set-cdr! deque new-node)))) 
  deque)

(define (front-delete-deque! deque)
  (if (empty-deque? deque)
    (error "Error front-delete-deque! --empty deque")
    (begin
      (set-car! deque (right-node (car deque)))
      (set-left-node! (car deque) nil)))
  deque)
(define (rear-delete-deque! deque)
  (if (empty-deque? deque)
    (error "Error front-delete-deque! --empty deque")
    (begin
      (set-cdr! deque (left-node (cdr deque)))
      (set-right-node! (cdr deque) nil)))
  deque)
